// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Resources.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nbrpc {
  public static partial class ResourceDictionaryRpc
  {
    static readonly string __ServiceName = "nbrpc.ResourceDictionaryRpc";

    static readonly grpc::Marshaller<global::Nbrpc.AddBoolRequest> __Marshaller_nbrpc_AddBoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nbrpc.AddBoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nbrpc.CommonReply> __Marshaller_nbrpc_CommonReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nbrpc.CommonReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nbrpc.AddIntRequest> __Marshaller_nbrpc_AddIntRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nbrpc.AddIntRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nbrpc.AddFloatRequest> __Marshaller_nbrpc_AddFloatRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nbrpc.AddFloatRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nbrpc.AddStringRequest> __Marshaller_nbrpc_AddStringRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nbrpc.AddStringRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nbrpc.AddSolidSolorBrushRequest> __Marshaller_nbrpc_AddSolidSolorBrushRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nbrpc.AddSolidSolorBrushRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nbrpc.AddImageBrushRequest> __Marshaller_nbrpc_AddImageBrushRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nbrpc.AddImageBrushRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Nbrpc.AddBoolRequest, global::Nbrpc.CommonReply> __Method_AddBool = new grpc::Method<global::Nbrpc.AddBoolRequest, global::Nbrpc.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddBool",
        __Marshaller_nbrpc_AddBoolRequest,
        __Marshaller_nbrpc_CommonReply);

    static readonly grpc::Method<global::Nbrpc.AddIntRequest, global::Nbrpc.CommonReply> __Method_AddInt = new grpc::Method<global::Nbrpc.AddIntRequest, global::Nbrpc.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddInt",
        __Marshaller_nbrpc_AddIntRequest,
        __Marshaller_nbrpc_CommonReply);

    static readonly grpc::Method<global::Nbrpc.AddFloatRequest, global::Nbrpc.CommonReply> __Method_AddFloat = new grpc::Method<global::Nbrpc.AddFloatRequest, global::Nbrpc.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddFloat",
        __Marshaller_nbrpc_AddFloatRequest,
        __Marshaller_nbrpc_CommonReply);

    static readonly grpc::Method<global::Nbrpc.AddStringRequest, global::Nbrpc.CommonReply> __Method_AddString = new grpc::Method<global::Nbrpc.AddStringRequest, global::Nbrpc.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddString",
        __Marshaller_nbrpc_AddStringRequest,
        __Marshaller_nbrpc_CommonReply);

    static readonly grpc::Method<global::Nbrpc.AddSolidSolorBrushRequest, global::Nbrpc.CommonReply> __Method_AddSolidSolorBrush = new grpc::Method<global::Nbrpc.AddSolidSolorBrushRequest, global::Nbrpc.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSolidSolorBrush",
        __Marshaller_nbrpc_AddSolidSolorBrushRequest,
        __Marshaller_nbrpc_CommonReply);

    static readonly grpc::Method<global::Nbrpc.AddImageBrushRequest, global::Nbrpc.CommonReply> __Method_AddImageBrush = new grpc::Method<global::Nbrpc.AddImageBrushRequest, global::Nbrpc.CommonReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddImageBrush",
        __Marshaller_nbrpc_AddImageBrushRequest,
        __Marshaller_nbrpc_CommonReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nbrpc.ResourcesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ResourceDictionaryRpc</summary>
    [grpc::BindServiceMethod(typeof(ResourceDictionaryRpc), "BindService")]
    public abstract partial class ResourceDictionaryRpcBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Nbrpc.CommonReply> AddBool(global::Nbrpc.AddBoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nbrpc.CommonReply> AddInt(global::Nbrpc.AddIntRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nbrpc.CommonReply> AddFloat(global::Nbrpc.AddFloatRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nbrpc.CommonReply> AddString(global::Nbrpc.AddStringRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nbrpc.CommonReply> AddSolidSolorBrush(global::Nbrpc.AddSolidSolorBrushRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nbrpc.CommonReply> AddImageBrush(global::Nbrpc.AddImageBrushRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ResourceDictionaryRpc</summary>
    public partial class ResourceDictionaryRpcClient : grpc::ClientBase<ResourceDictionaryRpcClient>
    {
      /// <summary>Creates a new client for ResourceDictionaryRpc</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ResourceDictionaryRpcClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ResourceDictionaryRpc that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ResourceDictionaryRpcClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ResourceDictionaryRpcClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ResourceDictionaryRpcClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Nbrpc.CommonReply AddBool(global::Nbrpc.AddBoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddBool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nbrpc.CommonReply AddBool(global::Nbrpc.AddBoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddBool, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddBoolAsync(global::Nbrpc.AddBoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddBoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddBoolAsync(global::Nbrpc.AddBoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddBool, null, options, request);
      }
      public virtual global::Nbrpc.CommonReply AddInt(global::Nbrpc.AddIntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddInt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nbrpc.CommonReply AddInt(global::Nbrpc.AddIntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddInt, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddIntAsync(global::Nbrpc.AddIntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddIntAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddIntAsync(global::Nbrpc.AddIntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddInt, null, options, request);
      }
      public virtual global::Nbrpc.CommonReply AddFloat(global::Nbrpc.AddFloatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddFloat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nbrpc.CommonReply AddFloat(global::Nbrpc.AddFloatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddFloat, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddFloatAsync(global::Nbrpc.AddFloatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddFloatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddFloatAsync(global::Nbrpc.AddFloatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddFloat, null, options, request);
      }
      public virtual global::Nbrpc.CommonReply AddString(global::Nbrpc.AddStringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddString(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nbrpc.CommonReply AddString(global::Nbrpc.AddStringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddString, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddStringAsync(global::Nbrpc.AddStringRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddStringAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddStringAsync(global::Nbrpc.AddStringRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddString, null, options, request);
      }
      public virtual global::Nbrpc.CommonReply AddSolidSolorBrush(global::Nbrpc.AddSolidSolorBrushRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSolidSolorBrush(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nbrpc.CommonReply AddSolidSolorBrush(global::Nbrpc.AddSolidSolorBrushRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSolidSolorBrush, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddSolidSolorBrushAsync(global::Nbrpc.AddSolidSolorBrushRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSolidSolorBrushAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddSolidSolorBrushAsync(global::Nbrpc.AddSolidSolorBrushRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSolidSolorBrush, null, options, request);
      }
      public virtual global::Nbrpc.CommonReply AddImageBrush(global::Nbrpc.AddImageBrushRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddImageBrush(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nbrpc.CommonReply AddImageBrush(global::Nbrpc.AddImageBrushRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddImageBrush, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddImageBrushAsync(global::Nbrpc.AddImageBrushRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddImageBrushAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nbrpc.CommonReply> AddImageBrushAsync(global::Nbrpc.AddImageBrushRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddImageBrush, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ResourceDictionaryRpcClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ResourceDictionaryRpcClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ResourceDictionaryRpcBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddBool, serviceImpl.AddBool)
          .AddMethod(__Method_AddInt, serviceImpl.AddInt)
          .AddMethod(__Method_AddFloat, serviceImpl.AddFloat)
          .AddMethod(__Method_AddString, serviceImpl.AddString)
          .AddMethod(__Method_AddSolidSolorBrush, serviceImpl.AddSolidSolorBrush)
          .AddMethod(__Method_AddImageBrush, serviceImpl.AddImageBrush).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ResourceDictionaryRpcBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddBool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nbrpc.AddBoolRequest, global::Nbrpc.CommonReply>(serviceImpl.AddBool));
      serviceBinder.AddMethod(__Method_AddInt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nbrpc.AddIntRequest, global::Nbrpc.CommonReply>(serviceImpl.AddInt));
      serviceBinder.AddMethod(__Method_AddFloat, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nbrpc.AddFloatRequest, global::Nbrpc.CommonReply>(serviceImpl.AddFloat));
      serviceBinder.AddMethod(__Method_AddString, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nbrpc.AddStringRequest, global::Nbrpc.CommonReply>(serviceImpl.AddString));
      serviceBinder.AddMethod(__Method_AddSolidSolorBrush, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nbrpc.AddSolidSolorBrushRequest, global::Nbrpc.CommonReply>(serviceImpl.AddSolidSolorBrush));
      serviceBinder.AddMethod(__Method_AddImageBrush, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nbrpc.AddImageBrushRequest, global::Nbrpc.CommonReply>(serviceImpl.AddImageBrush));
    }

  }
}
#endregion
