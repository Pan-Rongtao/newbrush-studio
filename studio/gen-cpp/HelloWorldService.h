/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HelloWorldService_H
#define HelloWorldService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "HelloWorld_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class HelloWorldServiceIf {
 public:
  virtual ~HelloWorldServiceIf() {}
  virtual void SayHello(const std::string& msg) = 0;
};

class HelloWorldServiceIfFactory {
 public:
  typedef HelloWorldServiceIf Handler;

  virtual ~HelloWorldServiceIfFactory() {}

  virtual HelloWorldServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HelloWorldServiceIf* /* handler */) = 0;
};

class HelloWorldServiceIfSingletonFactory : virtual public HelloWorldServiceIfFactory {
 public:
  HelloWorldServiceIfSingletonFactory(const ::std::shared_ptr<HelloWorldServiceIf>& iface) : iface_(iface) {}
  virtual ~HelloWorldServiceIfSingletonFactory() {}

  virtual HelloWorldServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HelloWorldServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<HelloWorldServiceIf> iface_;
};

class HelloWorldServiceNull : virtual public HelloWorldServiceIf {
 public:
  virtual ~HelloWorldServiceNull() {}
  void SayHello(const std::string& /* msg */) {
    return;
  }
};

typedef struct _HelloWorldService_SayHello_args__isset {
  _HelloWorldService_SayHello_args__isset() : msg(false) {}
  bool msg :1;
} _HelloWorldService_SayHello_args__isset;

class HelloWorldService_SayHello_args {
 public:

  HelloWorldService_SayHello_args(const HelloWorldService_SayHello_args&);
  HelloWorldService_SayHello_args& operator=(const HelloWorldService_SayHello_args&);
  HelloWorldService_SayHello_args() : msg() {
  }

  virtual ~HelloWorldService_SayHello_args() noexcept;
  std::string msg;

  _HelloWorldService_SayHello_args__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const HelloWorldService_SayHello_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const HelloWorldService_SayHello_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloWorldService_SayHello_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HelloWorldService_SayHello_pargs {
 public:


  virtual ~HelloWorldService_SayHello_pargs() noexcept;
  const std::string* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HelloWorldService_SayHello_result {
 public:

  HelloWorldService_SayHello_result(const HelloWorldService_SayHello_result&);
  HelloWorldService_SayHello_result& operator=(const HelloWorldService_SayHello_result&);
  HelloWorldService_SayHello_result() {
  }

  virtual ~HelloWorldService_SayHello_result() noexcept;

  bool operator == (const HelloWorldService_SayHello_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HelloWorldService_SayHello_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HelloWorldService_SayHello_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class HelloWorldService_SayHello_presult {
 public:


  virtual ~HelloWorldService_SayHello_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class HelloWorldServiceClient : virtual public HelloWorldServiceIf {
 public:
  HelloWorldServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HelloWorldServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SayHello(const std::string& msg);
  void send_SayHello(const std::string& msg);
  void recv_SayHello();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HelloWorldServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<HelloWorldServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HelloWorldServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SayHello(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HelloWorldServiceProcessor(::std::shared_ptr<HelloWorldServiceIf> iface) :
    iface_(iface) {
    processMap_["SayHello"] = &HelloWorldServiceProcessor::process_SayHello;
  }

  virtual ~HelloWorldServiceProcessor() {}
};

class HelloWorldServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HelloWorldServiceProcessorFactory(const ::std::shared_ptr< HelloWorldServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< HelloWorldServiceIfFactory > handlerFactory_;
};

class HelloWorldServiceMultiface : virtual public HelloWorldServiceIf {
 public:
  HelloWorldServiceMultiface(std::vector<std::shared_ptr<HelloWorldServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HelloWorldServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<HelloWorldServiceIf> > ifaces_;
  HelloWorldServiceMultiface() {}
  void add(::std::shared_ptr<HelloWorldServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SayHello(const std::string& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SayHello(msg);
    }
    ifaces_[i]->SayHello(msg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class HelloWorldServiceConcurrentClient : virtual public HelloWorldServiceIf {
 public:
  HelloWorldServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  HelloWorldServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SayHello(const std::string& msg);
  int32_t send_SayHello(const std::string& msg);
  void recv_SayHello(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
